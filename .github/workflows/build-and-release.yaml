name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        go-version: [1.18]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: go mod download

    - name: Build module
      run: go build -o ./build/${{ matrix.os }}/main ./main.go

    - name: Copy config files
      run: |
        mkdir -p ./build/${{ matrix.os }}/config
        cp config.yaml ./build/${{ matrix.os }}/config/

    - name: Archive build output
      run: |
        cd ./build/${{ matrix.os }}
        zip -r ../${{ matrix.os }}-build.zip .
      if: matrix.os == 'windows-latest'
    - name: Archive build output
      run: |
        cd ./build/${{ matrix.os }}
        tar -czvf ../${{ matrix.os }}-build.tar.gz .
      if: matrix.os == 'ubuntu-latest'

    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-build
        path: ./build/${{ matrix.os }}-build.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./release

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload release asset for Windows
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/windows-latest-build.zip
        asset_name: windows-latest-build.zip
        asset_content_type: application/zip
      if: contains(github.ref, 'windows')

    - name: Upload release asset for Ubuntu
      id: upload-release-asset-ubuntu
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/ubuntu-latest-build.tar.gz
        asset_name: ubuntu-latest-build.tar.gz
        asset_content_type: application/gzip
      if: contains(github.ref, 'ubuntu')